<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqldiff PUBLIC "-//OpenMRS//DTD OpenMRS SQL Diff Config 1.0//EN" "http://resources.openmrs.org/doctype/sqldiff-1.0.dtd">

<sqldiff version="1.0">
	<diff>
		<version>1.0.0</version>
		<author>Bren Zosa</author>
		<date>October 25, 2011</date>
		<description>Regions, Provinces, Municipalities, Barangay codes, Family Folders and the join table</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_region (
				region_code int(9),
				name varchar(64),
				registered_voters int(9),
				population int(9),
				PRIMARY KEY (region_code)
			);
			
			CREATE TABLE IF NOT EXISTS chits_province (
				province_code int(9),
				region_code int(9),
				name varchar(64),
				income_class varchar(16),
				info varchar(48),
				registered_voters int(9),
				PRIMARY KEY (province_code),
				CONSTRAINT FOREIGN KEY (region_code) REFERENCES chits_region(region_code)
			);
			
			CREATE TABLE IF NOT EXISTS chits_municipality (
				municipality_code int(9),
				province_code int(9),
				name varchar(64),
				income_class varchar(8),
				city_class varchar(32),
				urban bit,
				partially_urban bit,
				rural bit,
				district varchar(8),
				registered_voters int(9),
				population int(9),
				land_area int(6),
				PRIMARY KEY (municipality_code),
				CONSTRAINT FOREIGN KEY (province_code) REFERENCES chits_province(province_code)
			);
			
			CREATE TABLE IF NOT EXISTS chits_barangay (
				barangay_code int(9),
				municipality_code int(9),
				name varchar(64),
				urban bit,
				partially_urban bit,
				rural bit,
				population int(9),
				PRIMARY KEY (barangay_code),
				CONSTRAINT FOREIGN KEY (municipality_code) REFERENCES chits_municipality(municipality_code)
			);

			CREATE TABLE IF NOT EXISTS chits_family_folder (
				family_folder_id int(11) NOT NULL AUTO_INCREMENT,
				uuid varchar(38),
				code varchar(16),
				name varchar(64),
				address varchar(64),
				barangay_code varchar(9),
				city_code varchar(9),
				notes varchar(255),
				date_created datetime,
				date_changed datetime,
				creator int(11),
				changed_by int(11),
				PRIMARY KEY (family_folder_id)
			);
			
			CREATE TABLE IF NOT EXISTS chits_family_folder_patient (
				patient_id int(11),
				family_folder_id int(11),
				CONSTRAINT FOREIGN KEY (patient_id) REFERENCES patient(patient_id),
				CONSTRAINT FOREIGN KEY (family_folder_id) REFERENCES chits_family_folder(family_folder_id)
			);
		</sql>
	</diff>
	<diff>
		<version>1.0.1</version>
		<author>Bren Zosa</author>
		<date>November 3, 2011</date>
		<description>Locale default settings, family folder head of the family support, and remove duplicate patient family folder memberships</description>
		<sql>
			UPDATE user_property SET property_value = 'en_US' WHERE property = 'defaultLocale' OR property = 'proficientLocales';
			UPDATE global_property SET property_value = 'en_US' WHERE property = 'default_locale';
			
			ALTER TABLE chits_family_folder ADD (
				head_of_the_family int(11),
				CONSTRAINT FOREIGN KEY (head_of_the_family) REFERENCES patient(patient_id)
			);
			
			CREATE TABLE IF NOT EXISTS chits_tmp_orphanize_entries (patient_id int(11), family_folder_id int(11), INDEX (patient_id, family_folder_id));
			DELETE FROM chits_tmp_orphanize_entries;
			
			INSERT chits_tmp_orphanize_entries
			       (SELECT patient_id, family_folder_id
			          FROM chits_family_folder_patient
			         WHERE (family_folder_id, patient_id) NOT IN
			               (SELECT MIN(family_folder_id), patient_id 
			                  FROM chits_family_folder_patient
			                 GROUP BY patient_id HAVING COUNT(*) > 1)
			           AND patient_id IN
			               (SELECT patient_id
			                  FROM chits_family_folder_patient
			                 GROUP BY patient_id HAVING COUNT(*) > 1
			               )
			       );
			
			DELETE FROM chits_family_folder_patient
			 WHERE (patient_id, family_folder_id) IN
			       (SELECT patient_id, family_folder_id
			          FROM chits_tmp_orphanize_entries);
			
			DROP TABLE chits_tmp_orphanize_entries;
		</sql>
	</diff>
	<diff>
		<version>1.0.2</version>
		<author>Bren Zosa</author>
		<date>November 16, 2011</date>
		<description>Add Voidable attributes to FamilyFolder to convert it to a BaseOpenmrsData object for use in web services.</description>
		<sql>
			ALTER TABLE chits_family_folder ADD (
				voided smallint(6) NOT NULL DEFAULT 0,
				voided_by int(11),
				date_voided datetime,
				void_reason varchar(255)
			);
			
			UPDATE chits_family_folder SET uuid = UUID() WHERE uuid IS NULL;

			UPDATE global_property
			   SET property_value = '/openmrs/'
			 WHERE property = 'webservices.rest.uriPrefix';
		</sql>
	</diff>

	<diff>
		<version>1.0.3</version>
		<author>Bren Zosa</author>
		<date>December 29, 2011</date>
		<description>Add patient queue table containing list of patients in the queue.</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_patient_queue (
				patient_queue_id int(11) NOT NULL AUTO_INCREMENT,
				patient_id int(11),
				encounter_id int(11),
				entered_queue datetime,
				consult_start datetime,
				consult_end datetime,
				exited_queue datetime,
				PRIMARY KEY (patient_queue_id),
				CONSTRAINT FOREIGN KEY (patient_id) REFERENCES patient(patient_id),
				CONSTRAINT FOREIGN KEY (encounter_id) REFERENCES encounter(encounter_id)
			);
		</sql>
	</diff>
	
	<diff>
		<version>1.0.4</version>
		<author>Bren Zosa</author>
		<date>January 11, 2012</date>
		<description>Added support for a 'notes number' for the patient queue table.</description>
		<sql>
			ALTER TABLE chits_patient_queue ADD (
				notes_number int(5)
			);
		</sql>
	</diff>

	<diff>
		<version>1.0.5</version>
		<author>Bren Zosa</author>
		<date>January 13, 2012</date>
		<description>Allow only english locales</description>
		<sql>
			UPDATE user_property SET property_value = 'en_US' WHERE property = 'defaultLocale' OR property = 'proficientLocales';
			UPDATE global_property SET property_value = 'en_US' WHERE property = 'default_locale';
			UPDATE user_property SET property_value = 'en' WHERE property = 'locale.allowed.list';
		</sql>
	</diff>

	<diff>
		<version>1.0.6</version>
		<author>Bren Zosa</author>
		<date>February 24, 2012</date>
		<description>Allow only english locales</description>
		<sql>
			UPDATE global_property SET property_value = 'en' WHERE property = 'locale.allowed.list';
		</sql>
	</diff>
	
	<diff>
		<version>1.1.0</version>
		<author>Bren Zosa</author>
		<date>February 24, 2012</date>
		<description>Defines a user's barangay assignments</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_user_barangay (
				user_barangay_id int(11) NOT NULL AUTO_INCREMENT,
				user_id int(11),
				barangay_code varchar(9),
				PRIMARY KEY (user_barangay_id),
				CONSTRAINT FOREIGN KEY (user_id) REFERENCES users(user_id)
			);
		</sql>
	</diff>

	<diff>
		<version>1.1.1</version>
		<author>Bren Zosa</author>
		<date>March 09, 2012</date>
		<description>Change all 'en' locales in the concept_name table to be 'en_US'</description>
		<sql>
			UPDATE concept_name SET locale = 'en_US' where locale = 'en';
		</sql>
	</diff>
	
	<diff>
		<version>1.1.2</version>
		<author>Bren Zosa</author>
		<date>March 10, 2012</date>
		<description>Household Information tables and updates</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_household_information (
				household_information_id int(11) NOT NULL AUTO_INCREMENT,
				uuid varchar(38),
				access_to_water_supply varchar(16),
				toilet_facility varchar(16),
				toilet_location varchar(16),
				disposal_of_solid_waste varchar(16),
				date_first_inspected datetime,
				reinspection_date datetime,
				date_created datetime,
				date_changed datetime,
				creator int(11),
				changed_by int(11),
				voided smallint(6) NOT NULL DEFAULT 0,
				voided_by int(11),
				date_voided datetime,
				void_reason varchar(255),
				PRIMARY KEY (household_information_id)
			);

			ALTER TABLE chits_family_folder ADD (
				household_information_id int(11),
				CONSTRAINT FOREIGN KEY (household_information_id) REFERENCES chits_household_information(household_information_id)
			);
		</sql>
	</diff>
	
	<diff>
		<version>1.1.3</version>
		<author>Bren Zosa</author>
		<date>March 17, 2012</date>
		<description>User Session Info table for auditing user login and logout actions</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_user_session_info (
				user_session_info_id int(11) NOT NULL AUTO_INCREMENT,
				session_id varchar(32),
				user_id int(11),
				remote_address varchar(15),
				user_agent varchar(128),
				login_timestamp datetime,
				logout_timestamp datetime,
				session_timed_out smallint(6) NOT NULL DEFAULT 0,
				CONSTRAINT FOREIGN KEY (user_id) REFERENCES users(user_id),
				PRIMARY KEY (user_session_info_id)
			);
		</sql>
	</diff>

	<diff>
		<version>1.1.4</version>
		<author>Bren Zosa</author>
		<date>March 29, 2012</date>
		<description>Set both columns in the chits_family_folder_patient as a primary key to make manual edits easier.</description>
		<sql>
			ALTER TABLE chits_family_folder_patient ADD (PRIMARY KEY (patient_id, family_folder_id));
		</sql>
	</diff>

	<diff>
		<version>1.1.5</version>
		<author>Bren Zosa</author>
		<date>April 06, 2012</date>
		<description>Corrects potential error introduced by 1.1.1 where multiple locale_preferred entries for en_US locale could surface.</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_tmp_dup_prefrd_names (concept_name_id int(11), INDEX (concept_name_id));
			DELETE FROM chits_tmp_dup_prefrd_names;
			INSERT chits_tmp_dup_prefrd_names (
			        SELECT CN.concept_name_id
			          FROM (SELECT concept_id, locale 
			                  FROM concept_name 
			                 WHERE locale_preferred = 1
			               GROUP BY locale, concept_Id
			                HAVING COUNT(*) > 1) MLTPL_PREFRD
			          JOIN concept_name CN
			            ON CN.concept_id = MLTPL_PREFRD.concept_id
			           AND CN.locale = MLTPL_PREFRD.locale
			           AND CN.locale_preferred = 1
			         WHERE CN.concept_name_id NOT IN 
			               (SELECT MAX(concept_name_id)
			                  FROM concept_name
			                 WHERE locale_preferred = 1
			              GROUP BY locale, concept_Id
			                HAVING COUNT(*) > 1)
			       );
			
			UPDATE concept_name
			   SET locale_preferred = 0
			 WHERE concept_name_id IN
			       (SELECT concept_name_id
			          FROM chits_tmp_dup_prefrd_names);
			
			DROP TABLE chits_tmp_dup_prefrd_names;
		</sql>
	</diff>
	
	<diff>
		<version>1.1.6</version>
		<author>Bren Zosa</author>
		<date>April 27, 2012</date>
		<description>Adds 'average family income' column to chits family folder.</description>
		<sql>
			ALTER TABLE chits_family_folder ADD (average_family_income VARCHAR(32));
		</sql>
	</diff>

	<diff>
		<version>1.1.7</version>
		<author>Bren Zosa</author>
		<date>May 10, 2012</date>
		<description>Removes duplicate concept name errors from previous concept dictionary uploads.</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_tmp_dup_synonyms (preserve_concept_name_id int(11), locale varchar(50), name varchar(255),
				INDEX (preserve_concept_name_id),
				INDEX (locale, name)
			);
			DELETE FROM chits_tmp_dup_synonyms;
			INSERT chits_tmp_dup_synonyms (
			          SELECT min(concept_name_id) preserve_concept_name_id, locale, name
			            FROM concept_name 
			           WHERE (concept_name_type != 'SHORT' or concept_name_type is null)
			           GROUP BY locale, name HAVING COUNT(*) > 1
			       );
			
			DELETE
			  FROM concept_word
			 WHERE concept_name_id
			    IN (
			          SELECT concept_name_id
			            FROM concept_name
			           WHERE (locale, name)
			              IN (SELECT locale, name FROM chits_tmp_dup_synonyms)
			             AND concept_name_id 
			          NOT IN (SELECT preserve_concept_name_id FROM chits_tmp_dup_synonyms)
			       );
			
			DELETE
			  FROM concept_name
			 WHERE (locale, name)
			    IN (SELECT locale, name FROM chits_tmp_dup_synonyms)
			   AND concept_name_id 
			NOT IN (SELECT preserve_concept_name_id FROM chits_tmp_dup_synonyms);
			
			DROP TABLE chits_tmp_dup_synonyms;	
		</sql>
	</diff>
	
	<diff>
		<version>1.1.8</version>
		<author>Bren Zosa</author>
		<date>May 10, 2012</date>
		<description>Removes duplicate concept names within the same concept (Typically due to the short name being the same as the fully specified name).</description>
		<sql>
			CREATE TABLE IF NOT EXISTS chits_tmp_dup_names (concept_id int(11), locale varchar(50), name varchar(255),
				INDEX (concept_id, locale, name)
			);
			DELETE FROM chits_tmp_dup_names;
			INSERT chits_tmp_dup_names (
			          SELECT concept_id, locale, name
			            FROM concept_name 
			           GROUP BY concept_id, locale, name HAVING COUNT(*) > 1
			       );
			
			DELETE
			  FROM concept_word
			 WHERE concept_name_id
			    IN (
			          SELECT concept_name_id
			            FROM concept_name
			           WHERE (concept_id, locale, name)
			              IN (SELECT concept_id, locale, name FROM chits_tmp_dup_names)
			             AND (concept_name_type != 'FULLY_SPECIFIED' OR concept_name_type IS NULL)
			       );

			DELETE
			  FROM concept_name
			 WHERE (concept_id, locale, name)
           	    IN (SELECT concept_id, locale, name FROM chits_tmp_dup_names)
           	   AND (concept_name_type != 'FULLY_SPECIFIED' OR concept_name_type IS NULL);

			DROP TABLE chits_tmp_dup_names;
		</sql>
	</diff>
</sqldiff>
